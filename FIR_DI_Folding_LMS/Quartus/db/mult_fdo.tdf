--lpm_mult DEDICATED_MULTIPLIER_CIRCUITRY="NO" DEVICE_FAMILY="Cyclone IV E" DSP_BLOCK_BALANCING="AUTO" LPM_PIPELINE=0 LPM_REPRESENTATION="SIGNED" LPM_WIDTHA=7 LPM_WIDTHB=7 LPM_WIDTHP=14 MAXIMIZE_SPEED=5 dataa datab result CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48
--VERSION_BEGIN 12.1SP1 cbx_cycloneii 2013:01:31:18:05:07:SJ cbx_lpm_add_sub 2013:01:31:18:05:07:SJ cbx_lpm_mult 2013:01:31:18:05:07:SJ cbx_mgl 2013:01:31:18:08:27:SJ cbx_padd 2013:01:31:18:05:07:SJ cbx_stratix 2013:01:31:18:05:07:SJ cbx_stratixii 2013:01:31:18:05:07:SJ cbx_util_mgl 2013:01:31:18:05:07:SJ  VERSION_END


-- Copyright (C) 1991-2012 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.


FUNCTION carry_sum (cin, sin)
RETURNS ( cout, sout);
FUNCTION lcell (in)
RETURNS ( out);
FUNCTION soft (in)
RETURNS ( out);

--synthesis_resources = lut 75 
SUBDESIGN mult_fdo
( 
	dataa[6..0]	:	input;
	datab[6..0]	:	input;
	result[13..0]	:	output;
) 
VARIABLE
	add12_result[10..0]	:	WIRE;
	add16_result[7..0]	:	WIRE;
	add20_result[3..0]	:	WIRE;
	add8_result[13..0]	:	WIRE;
	cs2a[3..0] : carry_sum;
	cs4a[2..0] : carry_sum;
	le3a[6..0] : lcell;
	le5a[7..0] : lcell;
	le6a[7..0] : lcell;
	le7a[7..0] : lcell;
	sft10a[13..0] : soft;
	sft11a[13..0] : soft;
	sft13a[10..0] : soft;
	sft14a[10..0] : soft;
	sft15a[10..0] : soft;
	sft17a[7..0] : soft;
	sft18a[7..0] : soft;
	sft19a[7..0] : soft;
	sft21a[3..0] : soft;
	sft22a[3..0] : soft;
	sft23a[3..0] : soft;
	sft9a[13..0] : soft;
	dataa_node[6..0]	: WIRE;
	datab_node[6..0]	: WIRE;
	final_result_node[13..0]	: WIRE;
	w105w[7..0]	: WIRE;
	w12w[7..0]	: WIRE;
	w151w[7..0]	: WIRE;
	w17w[6..0]	: WIRE;
	w192w[7..0]	: WIRE;
	w237w	: WIRE;
	w253w	: WIRE;
	w357w[13..0]	: WIRE;

BEGIN 
	add12_result[] = sft13a[].out + sft14a[].out;
	add16_result[] = sft17a[].out + sft18a[].out;
	add20_result[] = sft21a[].out + sft22a[].out;
	add8_result[] = sft9a[].out + sft10a[].out;
	cs2a[].cin = ( B"0", ((w12w[4..4] & cs2a[1].cout) # w12w[5..5]), ((w12w[2..2] & cs2a[0].cout) # w12w[3..3]), w12w[1..1]);
	cs2a[].sin = ( cs2a[2].cout, ((((((! w12w[5..5]) & w12w[4..4]) & cs2a[1].cout) # ((w12w[5..5] & w12w[4..4]) & (! cs2a[1].cout))) # ((w12w[5..5] & (! w12w[4..4])) & cs2a[1].cout)) # ((w12w[5..5] & (! w12w[4..4])) & (! cs2a[1].cout))), ((((((! w12w[3..3]) & w12w[2..2]) & cs2a[0].cout) # ((w12w[3..3] & w12w[2..2]) & (! cs2a[0].cout))) # ((w12w[3..3] & (! w12w[2..2])) & cs2a[0].cout)) # ((w12w[3..3] & (! w12w[2..2])) & (! cs2a[0].cout))), w12w[1..1]);
	cs4a[].cin = ( ((w12w[4..4] & cs4a[1].cout) # w12w[5..5]), ((w12w[2..2] & cs4a[0].cout) # w12w[3..3]), w12w[1..1]);
	cs4a[].sin = ( ((((((! w12w[5..5]) & (! w12w[4..4])) & cs4a[1].cout) # (((! w12w[5..5]) & w12w[4..4]) & (! cs4a[1].cout))) # ((w12w[5..5] & w12w[4..4]) & (! cs4a[1].cout))) # ((w12w[5..5] & (! w12w[4..4])) & cs4a[1].cout)), ((((((! w12w[3..3]) & (! w12w[2..2])) & cs4a[0].cout) # (((! w12w[3..3]) & w12w[2..2]) & (! cs4a[0].cout))) # ((w12w[3..3] & w12w[2..2]) & (! cs4a[0].cout))) # ((w12w[3..3] & (! w12w[2..2])) & cs4a[0].cout)), w12w[0..0]);
	le3a[].in = (((w12w[6..6] & cs2a[3].sout) # ((w12w[6..6] & (! cs2a[3].sout)) & (! dataa_node[]))) # (((! w12w[6..6]) & cs2a[3].sout) & dataa_node[]));
	le5a[].in = (! ((! (((! ( dataa_node[], B"0")) & cs2a[0].sout) & (! cs4a[0].sout))) & (! ((((! ( dataa_node[6..6], dataa_node[])) & cs2a[0].sout) & cs4a[0].sout) # ((( dataa_node[6..6], dataa_node[]) & (! cs2a[0].sout)) & cs4a[0].sout)))));
	le6a[].in = (! ((! (((! ( dataa_node[], B"0")) & cs2a[1].sout) & (! cs4a[1].sout))) & (! ((((! ( dataa_node[6..6], dataa_node[])) & cs2a[1].sout) & cs4a[1].sout) # ((( dataa_node[6..6], dataa_node[]) & (! cs2a[1].sout)) & cs4a[1].sout)))));
	le7a[].in = (! ((! (((! ( dataa_node[], B"0")) & cs2a[2].sout) & (! cs4a[2].sout))) & (! ((((! ( dataa_node[6..6], dataa_node[])) & cs2a[2].sout) & cs4a[2].sout) # ((( dataa_node[6..6], dataa_node[]) & (! cs2a[2].sout)) & cs4a[2].sout)))));
	sft10a[].in = ( w253w, ( sft15a[10..10].out, ( sft19a[7..7].out, ( sft19a[6..6].out, ( sft19a[5..5].out, ( sft19a[4..4].out, ( sft19a[3..3].out, ( sft19a[2..2].out, ( sft19a[1..1].out, ( sft19a[0..0].out, ( sft15a[1..1].out, ( sft15a[0..0].out, ( w253w, cs2a[0].sout)))))))))))));
	sft11a[].in = add8_result[];
	sft13a[].in = ( w253w, ( le3a[5..5].out, ( le3a[4..4].out, ( le3a[3..3].out, ( le3a[2..2].out, ( le3a[1..1].out, ( le3a[0..0].out, ( le7a[1..1].out, ( le7a[0..0].out, ( le5a[3..2].out))))))))));
	sft14a[].in = ( w253w, ( (! w192w[7..7]), ( le7a[6..6].out, ( le7a[5..5].out, ( sft23a[2..2].out, ( sft23a[1..1].out, ( sft23a[0..0].out, ( le6a[3..3].out, ( le6a[2..2].out, ( w253w, cs2a[1].sout))))))))));
	sft15a[].in = add12_result[];
	sft17a[].in = ( w253w, ( w237w, ( (! w151w[7..7]), ( le7a[4..4].out, ( le7a[3..3].out, ( le7a[2..2].out, ( le5a[5..5].out, cs2a[2].sout)))))));
	sft18a[].in = ( w253w, ( w253w, ( sft23a[3..3].out, ( le6a[6..6].out, ( le6a[5..5].out, ( le6a[4..4].out, ( w253w, le5a[4..4].out)))))));
	sft19a[].in = add16_result[];
	sft21a[].in = ( w253w, ( w237w, ( w237w, le5a[6..6].out)));
	sft22a[].in = ( w253w, ( w253w, ( (! w105w[7..7]), w12w[6..6])));
	sft23a[].in = add20_result[];
	sft9a[].in = ( w237w, ( (! w17w[6..6]), ( sft15a[9..9].out, ( sft15a[8..8].out, ( sft15a[7..7].out, ( sft15a[6..6].out, ( sft15a[5..5].out, ( sft15a[4..4].out, ( sft15a[3..3].out, ( sft15a[2..2].out, ( le6a[1..1].out, ( le6a[0..0].out, ( le5a[1..0].out)))))))))))));
	dataa_node[] = ( dataa[6..0]);
	datab_node[] = ( datab[6..0]);
	final_result_node[] = ( w357w[13..0]);
	result[] = ( final_result_node[13..0]);
	w105w[] = le5a[].out;
	w12w[] = ( datab_node[6..6], datab_node[]);
	w151w[] = le6a[].out;
	w17w[] = le3a[].out;
	w192w[] = le7a[].out;
	w237w = B"1";
	w253w = B"0";
	w357w[] = ( sft11a[13..13].out, sft11a[12..12].out, sft11a[11..11].out, sft11a[10..10].out, sft11a[9..9].out, sft11a[8..8].out, sft11a[7..7].out, sft11a[6..6].out, sft11a[5..5].out, sft11a[4..4].out, sft11a[3..3].out, sft11a[2..2].out, sft11a[1..1].out, sft11a[0..0].out);
END;
--VALID FILE
