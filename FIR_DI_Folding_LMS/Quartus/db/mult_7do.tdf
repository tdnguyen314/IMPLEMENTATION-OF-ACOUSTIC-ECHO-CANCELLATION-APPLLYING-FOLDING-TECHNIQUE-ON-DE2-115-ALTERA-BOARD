--lpm_mult DEDICATED_MULTIPLIER_CIRCUITRY="NO" DEVICE_FAMILY="Cyclone IV E" DSP_BLOCK_BALANCING="AUTO" LPM_PIPELINE=0 LPM_REPRESENTATION="SIGNED" LPM_WIDTHA=5 LPM_WIDTHB=5 LPM_WIDTHP=10 MAXIMIZE_SPEED=5 dataa datab result CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48
--VERSION_BEGIN 12.1SP1 cbx_cycloneii 2013:01:31:18:05:07:SJ cbx_lpm_add_sub 2013:01:31:18:05:07:SJ cbx_lpm_mult 2013:01:31:18:05:07:SJ cbx_mgl 2013:01:31:18:08:27:SJ cbx_padd 2013:01:31:18:05:07:SJ cbx_stratix 2013:01:31:18:05:07:SJ cbx_stratixii 2013:01:31:18:05:07:SJ cbx_util_mgl 2013:01:31:18:05:07:SJ  VERSION_END


-- Copyright (C) 1991-2012 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.


FUNCTION carry_sum (cin, sin)
RETURNS ( cout, sout);
FUNCTION lcell (in)
RETURNS ( out);
FUNCTION soft (in)
RETURNS ( out);

--synthesis_resources = lut 43 
SUBDESIGN mult_7do
( 
	dataa[4..0]	:	input;
	datab[4..0]	:	input;
	result[9..0]	:	output;
) 
VARIABLE
	add11_result[6..0]	:	WIRE;
	add15_result[3..0]	:	WIRE;
	add7_result[9..0]	:	WIRE;
	cs2a[2..0] : carry_sum;
	cs4a[1..0] : carry_sum;
	le3a[4..0] : lcell;
	le5a[5..0] : lcell;
	le6a[5..0] : lcell;
	sft10a[9..0] : soft;
	sft12a[6..0] : soft;
	sft13a[6..0] : soft;
	sft14a[6..0] : soft;
	sft16a[3..0] : soft;
	sft17a[3..0] : soft;
	sft18a[3..0] : soft;
	sft8a[9..0] : soft;
	sft9a[9..0] : soft;
	dataa_node[4..0]	: WIRE;
	datab_node[4..0]	: WIRE;
	final_result_node[9..0]	: WIRE;
	w115w[5..0]	: WIRE;
	w12w[5..0]	: WIRE;
	w154w	: WIRE;
	w165w	: WIRE;
	w17w[4..0]	: WIRE;
	w223w[9..0]	: WIRE;
	w73w[5..0]	: WIRE;

BEGIN 
	add11_result[] = sft12a[].out + sft13a[].out;
	add15_result[] = sft16a[].out + sft17a[].out;
	add7_result[] = sft8a[].out + sft9a[].out;
	cs2a[].cin = ( B"0", ((w12w[2..2] & cs2a[0].cout) # w12w[3..3]), w12w[1..1]);
	cs2a[].sin = ( cs2a[1].cout, ((((((! w12w[3..3]) & w12w[2..2]) & cs2a[0].cout) # ((w12w[3..3] & w12w[2..2]) & (! cs2a[0].cout))) # ((w12w[3..3] & (! w12w[2..2])) & cs2a[0].cout)) # ((w12w[3..3] & (! w12w[2..2])) & (! cs2a[0].cout))), w12w[1..1]);
	cs4a[].cin = ( ((w12w[2..2] & cs4a[0].cout) # w12w[3..3]), w12w[1..1]);
	cs4a[].sin = ( ((((((! w12w[3..3]) & (! w12w[2..2])) & cs4a[0].cout) # (((! w12w[3..3]) & w12w[2..2]) & (! cs4a[0].cout))) # ((w12w[3..3] & w12w[2..2]) & (! cs4a[0].cout))) # ((w12w[3..3] & (! w12w[2..2])) & cs4a[0].cout)), w12w[0..0]);
	le3a[].in = (((w12w[4..4] & cs2a[2].sout) # ((w12w[4..4] & (! cs2a[2].sout)) & (! dataa_node[]))) # (((! w12w[4..4]) & cs2a[2].sout) & dataa_node[]));
	le5a[].in = (! ((! (((! ( dataa_node[], B"0")) & cs2a[0].sout) & (! cs4a[0].sout))) & (! ((((! ( dataa_node[4..4], dataa_node[])) & cs2a[0].sout) & cs4a[0].sout) # ((( dataa_node[4..4], dataa_node[]) & (! cs2a[0].sout)) & cs4a[0].sout)))));
	le6a[].in = (! ((! (((! ( dataa_node[], B"0")) & cs2a[1].sout) & (! cs4a[1].sout))) & (! ((((! ( dataa_node[4..4], dataa_node[])) & cs2a[1].sout) & cs4a[1].sout) # ((( dataa_node[4..4], dataa_node[]) & (! cs2a[1].sout)) & cs4a[1].sout)))));
	sft10a[].in = add7_result[];
	sft12a[].in = ( w165w, ( le3a[3..3].out, ( le3a[2..2].out, ( le3a[1..1].out, ( le3a[0..0].out, ( le5a[3..2].out))))));
	sft13a[].in = ( w165w, ( (! w115w[5..5]), ( le6a[4..4].out, ( le6a[3..3].out, ( le6a[2..2].out, ( w165w, cs2a[1].sout))))));
	sft14a[].in = add11_result[];
	sft16a[].in = ( w165w, ( w154w, ( (! w73w[5..5]), le5a[4..4].out)));
	sft17a[].in = ( w165w, ( w165w, ( w154w, w12w[4..4])));
	sft18a[].in = add15_result[];
	sft8a[].in = ( w154w, ( (! w17w[4..4]), ( sft14a[5..5].out, ( sft14a[4..4].out, ( sft14a[3..3].out, ( sft14a[2..2].out, ( le6a[1..1].out, ( le6a[0..0].out, ( le5a[1..0].out)))))))));
	sft9a[].in = ( w165w, ( sft14a[6..6].out, ( sft18a[3..3].out, ( sft18a[2..2].out, ( sft18a[1..1].out, ( sft18a[0..0].out, ( sft14a[1..1].out, ( sft14a[0..0].out, ( w165w, cs2a[0].sout)))))))));
	dataa_node[] = ( dataa[4..0]);
	datab_node[] = ( datab[4..0]);
	final_result_node[] = ( w223w[9..0]);
	result[] = ( final_result_node[9..0]);
	w115w[] = le6a[].out;
	w12w[] = ( datab_node[4..4], datab_node[]);
	w154w = B"1";
	w165w = B"0";
	w17w[] = le3a[].out;
	w223w[] = ( sft10a[9..9].out, sft10a[8..8].out, sft10a[7..7].out, sft10a[6..6].out, sft10a[5..5].out, sft10a[4..4].out, sft10a[3..3].out, sft10a[2..2].out, sft10a[1..1].out, sft10a[0..0].out);
	w73w[] = le5a[].out;
END;
--VALID FILE
