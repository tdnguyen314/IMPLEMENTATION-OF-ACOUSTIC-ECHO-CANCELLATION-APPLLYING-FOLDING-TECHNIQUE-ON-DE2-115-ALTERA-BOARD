--lpm_mult DEDICATED_MULTIPLIER_CIRCUITRY="NO" DEVICE_FAMILY="Cyclone IV E" DSP_BLOCK_BALANCING="AUTO" LPM_PIPELINE=0 LPM_REPRESENTATION="SIGNED" LPM_WIDTHA=7 LPM_WIDTHB=19 LPM_WIDTHP=26 MAXIMIZE_SPEED=5 dataa datab result CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48
--VERSION_BEGIN 12.1SP1 cbx_cycloneii 2013:01:31:18:05:07:SJ cbx_lpm_add_sub 2013:01:31:18:05:07:SJ cbx_lpm_mult 2013:01:31:18:05:07:SJ cbx_mgl 2013:01:31:18:08:27:SJ cbx_padd 2013:01:31:18:05:07:SJ cbx_stratix 2013:01:31:18:05:07:SJ cbx_stratixii 2013:01:31:18:05:07:SJ cbx_util_mgl 2013:01:31:18:05:07:SJ  VERSION_END


-- Copyright (C) 1991-2012 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.


FUNCTION carry_sum (cin, sin)
RETURNS ( cout, sout);
FUNCTION lcell (in)
RETURNS ( out);
FUNCTION soft (in)
RETURNS ( out);

--synthesis_resources = lut 171 
SUBDESIGN mult_6fo
( 
	dataa[6..0]	:	input;
	datab[18..0]	:	input;
	result[25..0]	:	output;
) 
VARIABLE
	add12_result[22..0]	:	WIRE;
	add16_result[19..0]	:	WIRE;
	add20_result[15..0]	:	WIRE;
	add8_result[25..0]	:	WIRE;
	cs2a[3..0] : carry_sum;
	cs4a[2..0] : carry_sum;
	le3a[18..0] : lcell;
	le5a[19..0] : lcell;
	le6a[19..0] : lcell;
	le7a[19..0] : lcell;
	sft10a[25..0] : soft;
	sft11a[25..0] : soft;
	sft13a[22..0] : soft;
	sft14a[22..0] : soft;
	sft15a[22..0] : soft;
	sft17a[19..0] : soft;
	sft18a[19..0] : soft;
	sft19a[19..0] : soft;
	sft21a[15..0] : soft;
	sft22a[15..0] : soft;
	sft23a[15..0] : soft;
	sft9a[25..0] : soft;
	dataa_node[18..0]	: WIRE;
	datab_node[6..0]	: WIRE;
	final_result_node[25..0]	: WIRE;
	w132w[19..0]	: WIRE;
	w15w[7..0]	: WIRE;
	w190w[19..0]	: WIRE;
	w20w[18..0]	: WIRE;
	w255w[19..0]	: WIRE;
	w324w	: WIRE;
	w352w	: WIRE;
	w601w[25..0]	: WIRE;

BEGIN 
	add12_result[] = sft13a[].out + sft14a[].out;
	add16_result[] = sft17a[].out + sft18a[].out;
	add20_result[] = sft21a[].out + sft22a[].out;
	add8_result[] = sft9a[].out + sft10a[].out;
	cs2a[].cin = ( B"0", ((w15w[4..4] & cs2a[1].cout) # w15w[5..5]), ((w15w[2..2] & cs2a[0].cout) # w15w[3..3]), w15w[1..1]);
	cs2a[].sin = ( cs2a[2].cout, ((((((! w15w[5..5]) & w15w[4..4]) & cs2a[1].cout) # ((w15w[5..5] & w15w[4..4]) & (! cs2a[1].cout))) # ((w15w[5..5] & (! w15w[4..4])) & cs2a[1].cout)) # ((w15w[5..5] & (! w15w[4..4])) & (! cs2a[1].cout))), ((((((! w15w[3..3]) & w15w[2..2]) & cs2a[0].cout) # ((w15w[3..3] & w15w[2..2]) & (! cs2a[0].cout))) # ((w15w[3..3] & (! w15w[2..2])) & cs2a[0].cout)) # ((w15w[3..3] & (! w15w[2..2])) & (! cs2a[0].cout))), w15w[1..1]);
	cs4a[].cin = ( ((w15w[4..4] & cs4a[1].cout) # w15w[5..5]), ((w15w[2..2] & cs4a[0].cout) # w15w[3..3]), w15w[1..1]);
	cs4a[].sin = ( ((((((! w15w[5..5]) & (! w15w[4..4])) & cs4a[1].cout) # (((! w15w[5..5]) & w15w[4..4]) & (! cs4a[1].cout))) # ((w15w[5..5] & w15w[4..4]) & (! cs4a[1].cout))) # ((w15w[5..5] & (! w15w[4..4])) & cs4a[1].cout)), ((((((! w15w[3..3]) & (! w15w[2..2])) & cs4a[0].cout) # (((! w15w[3..3]) & w15w[2..2]) & (! cs4a[0].cout))) # ((w15w[3..3] & w15w[2..2]) & (! cs4a[0].cout))) # ((w15w[3..3] & (! w15w[2..2])) & cs4a[0].cout)), w15w[0..0]);
	le3a[].in = (((w15w[6..6] & cs2a[3].sout) # ((w15w[6..6] & (! cs2a[3].sout)) & (! dataa_node[]))) # (((! w15w[6..6]) & cs2a[3].sout) & dataa_node[]));
	le5a[].in = (! ((! (((! ( dataa_node[], B"0")) & cs2a[0].sout) & (! cs4a[0].sout))) & (! ((((! ( dataa_node[18..18], dataa_node[])) & cs2a[0].sout) & cs4a[0].sout) # ((( dataa_node[18..18], dataa_node[]) & (! cs2a[0].sout)) & cs4a[0].sout)))));
	le6a[].in = (! ((! (((! ( dataa_node[], B"0")) & cs2a[1].sout) & (! cs4a[1].sout))) & (! ((((! ( dataa_node[18..18], dataa_node[])) & cs2a[1].sout) & cs4a[1].sout) # ((( dataa_node[18..18], dataa_node[]) & (! cs2a[1].sout)) & cs4a[1].sout)))));
	le7a[].in = (! ((! (((! ( dataa_node[], B"0")) & cs2a[2].sout) & (! cs4a[2].sout))) & (! ((((! ( dataa_node[18..18], dataa_node[])) & cs2a[2].sout) & cs4a[2].sout) # ((( dataa_node[18..18], dataa_node[]) & (! cs2a[2].sout)) & cs4a[2].sout)))));
	sft10a[].in = ( w352w, ( sft15a[22..22].out, ( sft19a[19..19].out, ( sft19a[18..18].out, ( sft19a[17..17].out, ( sft19a[16..16].out, ( sft19a[15..15].out, ( sft19a[14..14].out, ( sft19a[13..13].out, ( sft19a[12..12].out, ( sft19a[11..11].out, ( sft19a[10..10].out, ( sft19a[9..9].out, ( sft19a[8..8].out, ( sft19a[7..7].out, ( sft19a[6..6].out, ( sft19a[5..5].out, ( sft19a[4..4].out, ( sft19a[3..3].out, ( sft19a[2..2].out, ( sft19a[1..1].out, ( sft19a[0..0].out, ( sft15a[1..1].out, ( sft15a[0..0].out, ( w352w, cs2a[0].sout)))))))))))))))))))))))));
	sft11a[].in = add8_result[];
	sft13a[].in = ( w352w, ( le3a[17..17].out, ( le3a[16..16].out, ( le3a[15..15].out, ( le3a[14..14].out, ( le3a[13..13].out, ( le3a[12..12].out, ( le3a[11..11].out, ( le3a[10..10].out, ( le3a[9..9].out, ( le3a[8..8].out, ( le3a[7..7].out, ( le3a[6..6].out, ( le3a[5..5].out, ( le3a[4..4].out, ( le3a[3..3].out, ( le3a[2..2].out, ( le3a[1..1].out, ( le3a[0..0].out, ( le7a[1..1].out, ( le7a[0..0].out, ( le5a[3..2].out))))))))))))))))))))));
	sft14a[].in = ( w352w, ( (! w255w[19..19]), ( le7a[18..18].out, ( le7a[17..17].out, ( sft23a[14..14].out, ( sft23a[13..13].out, ( sft23a[12..12].out, ( sft23a[11..11].out, ( sft23a[10..10].out, ( sft23a[9..9].out, ( sft23a[8..8].out, ( sft23a[7..7].out, ( sft23a[6..6].out, ( sft23a[5..5].out, ( sft23a[4..4].out, ( sft23a[3..3].out, ( sft23a[2..2].out, ( sft23a[1..1].out, ( sft23a[0..0].out, ( le6a[3..3].out, ( le6a[2..2].out, ( w352w, cs2a[1].sout))))))))))))))))))))));
	sft15a[].in = add12_result[];
	sft17a[].in = ( w352w, ( w324w, ( (! w190w[19..19]), ( le7a[16..16].out, ( le7a[15..15].out, ( le7a[14..14].out, ( le7a[13..13].out, ( le7a[12..12].out, ( le7a[11..11].out, ( le7a[10..10].out, ( le7a[9..9].out, ( le7a[8..8].out, ( le7a[7..7].out, ( le7a[6..6].out, ( le7a[5..5].out, ( le7a[4..4].out, ( le7a[3..3].out, ( le7a[2..2].out, ( le5a[5..5].out, cs2a[2].sout)))))))))))))))))));
	sft18a[].in = ( w352w, ( w352w, ( sft23a[15..15].out, ( le6a[18..18].out, ( le6a[17..17].out, ( le6a[16..16].out, ( le6a[15..15].out, ( le6a[14..14].out, ( le6a[13..13].out, ( le6a[12..12].out, ( le6a[11..11].out, ( le6a[10..10].out, ( le6a[9..9].out, ( le6a[8..8].out, ( le6a[7..7].out, ( le6a[6..6].out, ( le6a[5..5].out, ( le6a[4..4].out, ( w352w, le5a[4..4].out)))))))))))))))))));
	sft19a[].in = add16_result[];
	sft21a[].in = ( w352w, ( w324w, ( w324w, ( le5a[18..18].out, ( le5a[17..17].out, ( le5a[16..16].out, ( le5a[15..15].out, ( le5a[14..14].out, ( le5a[13..13].out, ( le5a[12..12].out, ( le5a[11..11].out, ( le5a[10..10].out, ( le5a[9..9].out, ( le5a[8..8].out, ( le5a[7..6].out)))))))))))))));
	sft22a[].in = ( w352w, ( w352w, ( (! w132w[19..19]), ( w352w, ( w352w, ( w352w, ( w352w, ( w352w, ( w352w, ( w352w, ( w352w, ( w352w, ( w352w, ( w352w, ( w352w, w15w[6..6])))))))))))))));
	sft23a[].in = add20_result[];
	sft9a[].in = ( w324w, ( (! w20w[18..18]), ( sft15a[21..21].out, ( sft15a[20..20].out, ( sft15a[19..19].out, ( sft15a[18..18].out, ( sft15a[17..17].out, ( sft15a[16..16].out, ( sft15a[15..15].out, ( sft15a[14..14].out, ( sft15a[13..13].out, ( sft15a[12..12].out, ( sft15a[11..11].out, ( sft15a[10..10].out, ( sft15a[9..9].out, ( sft15a[8..8].out, ( sft15a[7..7].out, ( sft15a[6..6].out, ( sft15a[5..5].out, ( sft15a[4..4].out, ( sft15a[3..3].out, ( sft15a[2..2].out, ( le6a[1..1].out, ( le6a[0..0].out, ( le5a[1..0].out)))))))))))))))))))))))));
	dataa_node[] = ( datab[18..0]);
	datab_node[] = ( dataa[6..0]);
	final_result_node[] = ( w601w[25..0]);
	result[] = ( final_result_node[25..0]);
	w132w[] = le5a[].out;
	w15w[] = ( datab_node[6..6], datab_node[]);
	w190w[] = le6a[].out;
	w20w[] = le3a[].out;
	w255w[] = le7a[].out;
	w324w = B"1";
	w352w = B"0";
	w601w[] = ( sft11a[25..25].out, sft11a[24..24].out, sft11a[23..23].out, sft11a[22..22].out, sft11a[21..21].out, sft11a[20..20].out, sft11a[19..19].out, sft11a[18..18].out, sft11a[17..17].out, sft11a[16..16].out, sft11a[15..15].out, sft11a[14..14].out, sft11a[13..13].out, sft11a[12..12].out, sft11a[11..11].out, sft11a[10..10].out, sft11a[9..9].out, sft11a[8..8].out, sft11a[7..7].out, sft11a[6..6].out, sft11a[5..5].out, sft11a[4..4].out, sft11a[3..3].out, sft11a[2..2].out, sft11a[1..1].out, sft11a[0..0].out);
END;
--VALID FILE
